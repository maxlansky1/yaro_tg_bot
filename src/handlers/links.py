"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏

–°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã:
- /create_link - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
- /revoke_link - –æ—Ç–æ–∑–≤–∞—Ç—å —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
"""

from datetime import datetime, timedelta, timezone
from html import escape

from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from configs.config import Config
from keyboards.keyboards import get_approval_type_keyboard
from states.state import CreateLinkStates
from utils.GoogleSheets import GoogleSheetsManager
from utils.logger import get_logger

# === –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logger = get_logger(__name__)


# === –•–≠–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î ===
async def cmd_create_link(message: Message, bot: Bot, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ `/create_link` ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.

    –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –≤–≤–µ—Å—Ç–∏ –∏–º—è —Å—Å—ã–ª–∫–∏.
    """

    if message.from_user.id not in Config.TELEGRAM_ADMIN_IDS:
        await message.answer(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
        kb = InlineKeyboardBuilder()
        for channel_id in Config.TELEGRAM_CHANNEL_IDS:
            try:
                chat = await bot.get_chat(channel_id)
                title = chat.title or str(channel_id)
            except Exception as e:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}"
                )
                title = str(channel_id)
            kb.add(
                InlineKeyboardButton(
                    text=title, callback_data=f"select_channel:{channel_id}"
                )
            )

        await state.set_state(CreateLinkStates.waiting_for_channel)
        await message.answer(
            "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É:",
            reply_markup=kb.as_markup(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞.")


async def handle_channel_selected(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –æ–¥–æ–±—Ä–µ–Ω–∏—è.
    """
    try:
        channel_id = callback.data.split("select_channel:")[1]
        await state.update_data(selected_channel=channel_id)
        await state.set_state(CreateLinkStates.waiting_for_approval_type)

        await callback.message.edit_text(
            "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏:",
            reply_markup=get_approval_type_keyboard(),
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞", show_alert=True)


async def handle_approval_type_selected(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è —Å—Å—ã–ª–∫–∏.
    """
    try:
        if callback.data == "back_to_channel_selection":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–∞
            from keyboards.keyboards import get_channel_selection_keyboard

            kb = await get_channel_selection_keyboard(callback.bot)
            await state.set_state(CreateLinkStates.waiting_for_channel)
            await callback.message.edit_text(
                "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É:", reply_markup=kb
            )
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–¥–æ–±—Ä–µ–Ω–∏—è
        approval_required = callback.data == "approval_required"
        await state.update_data(approval_required=approval_required)
        await state.set_state(CreateLinkStates.waiting_for_link_name)

        approval_text = (
            "—Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if approval_required else "–±–µ–∑ –æ–¥–æ–±—Ä–µ–Ω–∏—è"
        )
        await callback.message.edit_text(
            f"üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ ({approval_text}):"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–ø–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è", show_alert=True)


async def process_link_name(
    message: Message, state: FSMContext, bot: Bot, gsheets: GoogleSheetsManager
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º—è —Å—Å—ã–ª–∫–∏.

    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ Telegram API,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        campaign_name = message.text.strip()
        if not campaign_name:
            await message.answer("‚ÑπÔ∏è –ò–º—è —Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

        data = await state.get_data()
        channel_id = data.get("selected_channel")
        approval_required = data.get("approval_required", True)

        if not channel_id:
            await message.answer("‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        await state.clear()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat = await bot.get_chat(channel_id)
        channel_name = chat.title or str(channel_id)

        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –¥–µ–π—Å—Ç–≤–∏—è
        expire_date = datetime.now() + timedelta(days=14)
        invite_link = await bot.create_chat_invite_link(
            chat_id=channel_id,  # id –∫–∞–Ω–∞–ª–∞
            name=campaign_name,  # –∏–º—è —Å—Å—ã–ª–∫–∏
            expire_date=expire_date,  # —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            creates_join_request=approval_required,  # –Ω—É–∂–Ω–æ –ª–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
        )

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        link_data = {
            "–ò–º—è —Å—Å—ã–ª–∫–∏": campaign_name,
            "–°—Å—ã–ª–∫–∞": invite_link.invite_link,
            "–ò–º—è –∫–∞–Ω–∞–ª–∞": channel_name,
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏": datetime.now(timezone.utc)
            .replace(microsecond=0)
            .strftime("%d.%m.%Y %H:%M:%S"),
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        gsheets.add_invite_link(link_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        approval_text = "—Å –æ–¥–æ–±—Ä–µ–Ω–∏–µ–º" if approval_required else "–±–µ–∑ –æ–¥–æ–±—Ä–µ–Ω–∏—è"
        response = (
            f"üîó <b>–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:</b>\n\n"
            f"üìõ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{escape(campaign_name)}</code>\n"
            f"üì£ <b>–ö–∞–Ω–∞–ª:</b> <code>{escape(channel_name)}</code>\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href='{invite_link.invite_link}'>{escape(invite_link.invite_link)}</a>"
        )
        await message.answer(response)
        logger.info(
            f"–°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} ({channel_name}): {campaign_name} ({approval_text})"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")
