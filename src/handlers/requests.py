"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
"""

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from configs.config import Config
from keyboards.keyboards import (get_back_to_channels_keyboard,
                                 get_channel_selection_keyboard,
                                 get_request_management_keyboard)
from states.state import RequestManagementStates
from utils.logger import get_logger

# === –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logger = get_logger(__name__)

# === –†–æ—É—Ç–µ—Ä ===
requests_router = Router()


@requests_router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏")
async def handle_manage_requests_button(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏".
    –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        if message.from_user.id not in Config.TELEGRAM_ADMIN_IDS:
            await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
        keyboard = await get_channel_selection_keyboard(
            message.bot, callback_prefix="manage_requests_channel"
        )

        await state.set_state(RequestManagementStates.waiting_for_channel_selection)
        await message.answer(
            "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏:", reply_markup=keyboard
        )

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏: {e}", exc_info=True
        )
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞")


@requests_router.callback_query(F.data.startswith("manage_requests_channel:"))
async def handle_channel_selection_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É.
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
        channel_id = callback.data.split("manage_requests_channel:")[1]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_channel=channel_id)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
        try:
            join_requests = await callback.bot.get_chat_join_requests(
                chat_id=channel_id,
                limit=10,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            await callback.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫", show_alert=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞—è–≤–æ–∫
        if not join_requests.requests:
            keyboard = get_back_to_channels_keyboard()
            await callback.message.edit_text(
                "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª", reply_markup=keyboard
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        requests_data = []
        for req in join_requests.requests:
            user = req.user
            requests_data.append(
                {
                    "user_id": user.id,
                    "username": user.username,
                    "full_name": user.full_name,
                }
            )

        await state.update_data(requests_data=requests_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞—è–≤–æ–∫
        text = "üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª:\n\n"
        for i, req in enumerate(requests_data, 1):
            username = f"@{req['username']}" if req["username"] else ""
            text += f"{i}. {req['full_name']} {username}\n"

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = get_request_management_keyboard()

        await state.set_state(RequestManagementStates.managing_requests)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞—è–≤–æ–∫: {e}", exc_info=True
        )
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–æ–∫", show_alert=True)


@requests_router.callback_query(F.data == "accept_all_requests")
async def handle_accept_all_requests(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        channel_id = data.get("selected_channel")
        requests_data = data.get("requests_data", [])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not channel_id or not requests_data:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
        success_count = 0
        for req in requests_data:
            try:
                await callback.bot.approve_chat_join_request(
                    chat_id=channel_id, user_id=req["user_id"]
                )
                success_count += 1
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {req['user_id']}: {e}"
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        keyboard = get_back_to_channels_keyboard()
        await callback.message.edit_text(
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–æ–∫: {success_count} –∏–∑ {len(requests_data)}",
            reply_markup=keyboard,
        )

        await state.clear()
        await callback.answer("–ó–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–æ–∫", show_alert=True)


@requests_router.callback_query(F.data == "decline_all_requests")
async def handle_decline_all_requests(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        channel_id = data.get("selected_channel")
        requests_data = data.get("requests_data", [])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not channel_id or not requests_data:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
        success_count = 0
        for req in requests_data:
            try:
                await callback.bot.decline_chat_join_request(
                    chat_id=channel_id, user_id=req["user_id"]
                )
                success_count += 1
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {req['user_id']}: {e}"
                )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        keyboard = get_back_to_channels_keyboard()
        await callback.message.edit_text(
            f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∑–∞—è–≤–æ–∫: {success_count} –∏–∑ {len(requests_data)}",
            reply_markup=keyboard,
        )

        await state.clear()
        await callback.answer("–ó–∞—è–≤–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–æ–∫", show_alert=True)


@requests_router.callback_query(F.data == "back_to_channel_selection")
async def handle_back_to_channel_selection(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–∞.
    """
    try:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
        keyboard = await get_channel_selection_keyboard(
            callback.bot, callback_prefix="manage_requests_channel"
        )

        await state.set_state(RequestManagementStates.waiting_for_channel_selection)
        await callback.message.edit_text(
            "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏:", reply_markup=keyboard
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–∞: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)
