"""
–ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
"""

from html import escape
from typing import Dict, List

from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from configs.config import Config
from keyboards.keyboards import (
    get_channel_statistics_keyboard,
    get_links_statistics_keyboard,
    get_main_menu_keyboard,
)
from states.state import StatisticsStates
from utils.GoogleSheets import GoogleSheetsManager
from utils.logger import get_logger

logger = get_logger(__name__)


async def cmd_statistics(message: Message, bot: Bot, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    if message.from_user.id not in Config.TELEGRAM_ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    try:
        await state.set_state(StatisticsStates.waiting_for_channel_selection)
        kb = await get_channel_statistics_keyboard(bot)

        await message.answer(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=kb,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def handle_channel_selected_for_stats(
    callback: CallbackQuery, state: FSMContext, bot: Bot, gsheets: GoogleSheetsManager
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞.
    """
    try:
        if callback.data == "back_to_main_stats":
            await state.clear()
            await callback.message.edit_text(
                "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu_keyboard(),
            )
            await callback.answer()
            return

        channel_id = callback.data.split("stats_channel:")[1]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        await state.update_data(selected_channel=channel_id)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        try:
            chat = await bot.get_chat(channel_id)
            channel_name = chat.title or str(channel_id)
        except Exception:
            channel_name = str(channel_id)

        await state.update_data(channel_name=channel_name)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ Google Sheets
        links = gsheets.get_invite_links_for_channel(channel_name)

        if not links:
            await callback.message.edit_text(
                f"‚ùå –î–ª—è –∫–∞–Ω–∞–ª–∞ <b>{escape(channel_name)}</b> –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.",
                reply_markup=await get_channel_statistics_keyboard(bot),
            )
            await callback.answer()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
        await state.update_data(channel_links=links)
        await state.set_state(StatisticsStates.waiting_for_link_selection)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Å—Å—ã–ª–æ–∫
        kb = get_links_statistics_keyboard(links)

        await callback.message.edit_text(
            f"üìä <b>–°—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞:</b> <code>{escape(channel_name)}</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:",
            reply_markup=kb,
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞", show_alert=True)


async def handle_link_selected_for_stats(
    callback: CallbackQuery, state: FSMContext, gsheets: GoogleSheetsManager
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        if callback.data == "back_to_channel_stats":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–æ–≤
            kb = await get_channel_statistics_keyboard(callback.bot)

            await state.set_state(StatisticsStates.waiting_for_channel_selection)
            await callback.message.edit_text(
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                reply_markup=kb,
            )
            await callback.answer()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Å—ã–ª–∫–∏ –∏–∑ callback_data
        selected_link_name = callback.data.split("stats_link:")[1]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏
        subscribers = gsheets.get_subscribers_for_link(selected_link_name)

        if not subscribers:
            await callback.message.edit_text(
                f"‚ùå –î–ª—è —Å—Å—ã–ª–∫–∏ <b>{escape(selected_link_name)}</b> –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
                reply_markup=get_links_statistics_keyboard(
                    (await state.get_data()).get("channel_links", [])
                ),
            )
            await callback.answer()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers_list = format_subscribers_list(subscribers)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
        await callback.message.edit_text(
            f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ:</b> <code>{escape(selected_link_name)}</code>\n\n"
            f"{subscribers_list}",
            reply_markup=get_links_statistics_keyboard(
                (await state.get_data()).get("channel_links", [])
            ),
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", show_alert=True)


def format_subscribers_list(subscribers: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    –î–µ–ª–∞–µ—Ç username –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è.
    """
    if not subscribers:
        return "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"

    formatted_list = []
    for i, subscriber in enumerate(subscribers, 1):
        username = subscriber.get("username", "").strip()
        user_id = subscriber.get("id", "").strip()

        if username and username != "None":
            # –î–µ–ª–∞–µ–º username –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º
            formatted_list.append(f"{i}. @{escape(username)}")
        elif user_id and user_id != "None":
            formatted_list.append(f"{i}. ID: {escape(str(user_id))}")
        else:
            formatted_list.append(f"{i}. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —á—Ç–µ–Ω–∏—è
        formatted_list.append("")

    # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    if formatted_list and formatted_list[-1] == "":
        formatted_list.pop()

    return "\n".join(formatted_list) if formatted_list else "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
