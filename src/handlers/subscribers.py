# subscribers.py
from utils.logger import get_logger
import html
from datetime import datetime
from aiogram import Bot
from aiogram.types import ChatMemberUpdated
from aiogram.enums import ChatMemberStatus
from configs.config import Config, HEADERS
from utils.GoogleSheets import GoogleSheetsManager

# === –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logger = get_logger(__name__)


# === –•–≠–ù–î–õ–ï–† –ü–û–î–ü–ò–°–ö–ò===
async def handle_new_member(update: ChatMemberUpdated, bot: Bot, gsheets: GoogleSheetsManager):
    try:
        if (update.old_chat_member.status in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED] and
            update.new_chat_member.status == ChatMemberStatus.MEMBER):

            user = update.new_chat_member.user
            invite = update.invite_link

            user_data = {
                'id': user.id,
                'full_name': html.escape(user.full_name),
                'username': f"@{html.escape(user.username)}" if user.username else "‚Äî",
                'language_code': html.escape(user.language_code) if user.language_code else "‚Äî",
                'is_premium': getattr(user, 'is_premium', False),
                'is_bot': user.is_bot,
                'last_online': getattr(user, 'last_online_date', '‚Äî'),
                'registration_date': getattr(user, 'registration_date', '‚Äî')
            }

            join_method = "Direct Join"
            invite_data = {}

            if invite:
                join_method = "Invite Link"
                invite_data = {
                    'link_name': html.escape(invite.name) if invite.name else "‚Äî",
                    'link': invite.invite_link,
                    'creator_id': getattr(invite.creator, 'id', '‚Äî'),
                    'is_primary': invite.is_primary,
                    'is_revoked': invite.is_revoked,
                    'expire_date': getattr(invite, 'expire_date', '‚Äî'),
                    'member_limit': getattr(invite, 'member_limit', '‚Äî'),
                    'pending_join_request_count': getattr(invite, 'pending_join_request_count', '‚Äî')
                }
            elif update.via_join_request:
                join_method = "Join Request"
                invite_data = {
                    'via_join_request': True,
                    'join_request_date': getattr(update, 'date', '‚Äî')
                }

            message = (
                f"üë§ <b>–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫</b>\n"
                f"‚îú <b>ID:</b> <code>{user_data['id']}</code>\n"
                f"‚îú <b>–ò–º—è:</b> {user_data['full_name']}\n"
                f"‚îú <b>Username:</b> {user_data['username']}\n"
                f"‚îú <b>–Ø–∑—ã–∫:</b> {user_data['language_code']}\n"
                f"‚îú <b>Premium:</b> {'‚úÖ' if user_data['is_premium'] else '‚ùå'}\n"
                f"‚îú <b>–ë–æ—Ç:</b> {'‚úÖ' if user_data['is_bot'] else '‚ùå'}\n"
                f"‚îî <b>–°–ø–æ—Å–æ–± –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b> {join_method}\n"
            )

            if invite_data:
                message += "\nüîó <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Å—ã–ª–∫–µ:</b>\n"
                for key, value in invite_data.items():
                    if value not in ['‚Äî', None]:
                        message += f"‚îú <b>{key.replace('_', ' ').title()}:</b> {value}\n"

            additional_info = [
                f"üìÖ <b>Last Online:</b> {user_data['last_online']}" if user_data['last_online'] != '‚Äî' else None,
                f"üìÖ <b>Registration Date:</b> {user_data['registration_date']}" if user_data['registration_date'] != '‚Äî' else None
            ]
            if any(additional_info):
                message += "\n" + "\n".join(filter(None, additional_info))

            '''
            –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ —é–∑–µ—Ä–∞ (–∫–æ—Å—Ç—ã–ª—å - –ª–µ–Ω—å –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏)
            '''
            # await bot.send_message(chat_id=Config.CHANNEL_ID, text=message, parse_mode="HTML")

            full_data = {
                **user_data,
                **invite_data,
                'join_method': join_method,
                'join_date': datetime.utcnow().isoformat(),
                'status': 'active'
            }

            updated = gsheets.update_status_by_id(user.id, 'active')

            if not updated:
                gsheets.ensure_headers(HEADERS)
                gsheets.add_subscriber(HEADERS, full_data)

            logger.info(f"New member: {user.id} via {join_method}")

    except Exception as e:
        logger.error(f"Error in handle_new_member: {e}", exc_info=True)
        
        
# === –•–≠–ù–î–õ–ï–† –û–¢–ü–ò–°–ö–ò===
async def handle_unsubscribed_member(update: ChatMemberUpdated, bot: Bot, gsheets: GoogleSheetsManager):
    try:
        if (update.old_chat_member.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.RESTRICTED] and
            update.new_chat_member.status in [ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]):

            user = update.old_chat_member.user
            full_name = html.escape(user.full_name) if user.full_name else "‚Äî"
            username = f"@{html.escape(user.username)}" if user.username else "‚Äî"

            message = (
                f"üö™ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è</b>\n"
                f"üôç <b>–ò–º—è:</b> {full_name}\n"
                f"üí¨ <b>Username:</b> {username}\n"
                f"üÜî <b>ID:</b> <code>{user.id}</code>"
            )

            if Config.SPREADSHEET_ID and gsheets:
                success = gsheets.update_status_by_id(user.id, 'inactive')
                if success:
                    logger.info(f"User {user.id} marked inactive in sheet")
                else:
                    logger.warning(f"User {user.id} not found in sheet")

            '''
            –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ —é–∑–µ—Ä–∞ (–∫–æ—Å—Ç—ã–ª—å - –ª–µ–Ω—å –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥–∏)
            '''
            # await bot.send_message(chat_id=Config.CHANNEL_ID, text=message, parse_mode="HTML")
            
            logger.info(f"User {user.id} unsubscribed")

    except Exception as e:
        logger.error(f"Error in handle_unsubscribed_member: {e}", exc_info=True)
