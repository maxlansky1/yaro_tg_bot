"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤,
–Ω–∞—Å—Ç—Ä–æ–π–∫—É FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.
"""

import asyncio
from functools import partial

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatMemberStatus, ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message

from configs.config import Config
from handlers.buttons import buttons_router
from handlers.links import cmd_create_link, process_link_name
from handlers.requests import requests_router
from handlers.subscribers import handle_new_member, handle_unsubscribed_member
from keyboards.keyboards import get_main_menu_keyboard
from states.state import CreateLinkStates
from utils.backup import GoogleTableBackup
from utils.GoogleSheets import GoogleSheetsManager
from utils.logger import get_logger

# === –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logger = get_logger(__name__)


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
def init_bot(gsheets: GoogleSheetsManager) -> Bot:
    """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏"""
    bot = Bot(
        token=Config.TELEGRAM_BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )
    bot.gsheets = gsheets  # –î–æ–±–∞–≤–ª—è–µ–º gsheets –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –±–æ—Ç–∞
    return bot


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_storage():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç FSM —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    return MemoryStorage()


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets ===
def init_gsheets() -> GoogleSheetsManager:
    """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏"""
    try:
        gsheets = GoogleSheetsManager()
        logger.info("‚úÖ GoogleSheetsManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return gsheets
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GoogleSheetsManager: {e}")
        raise


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ ===
def register_chat_member_handlers(
    dp: Dispatcher, bot: Bot, gsheets: GoogleSheetsManager
):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∞ —á–∞—Ç–∞"""
    dp.chat_member.register(
        partial(handle_new_member, bot=bot, gsheets=gsheets),
        F.old_chat_member.status.in_([ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]),
        F.new_chat_member.status == ChatMemberStatus.MEMBER,
    )

    dp.chat_member.register(
        partial(handle_unsubscribed_member, bot=bot, gsheets=gsheets),
        F.old_chat_member.status.in_(
            [ChatMemberStatus.MEMBER, ChatMemberStatus.RESTRICTED]
        ),
        F.new_chat_member.status.in_([ChatMemberStatus.LEFT, ChatMemberStatus.KICKED]),
    )
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ ===
def register_command_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""

    @dp.message(CommandStart())
    async def cmd_start(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            if message.from_user.id in Config.TELEGRAM_ADMIN_IDS:
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_main_menu_keyboard(),
                )
            else:
                await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}", exc_info=True)
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

    @dp.message(Command("create_link"))
    async def handle_create_link_command(message: Message, state: FSMContext):
        await cmd_create_link(message, message.bot, state)

    @dp.message(CreateLinkStates.waiting_for_link_name)
    async def handle_link_name_input(message: Message, state: FSMContext):
        await process_link_name(message, state, message.bot, message.bot.gsheets)

    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def run_bot(bot: Bot, dp: Dispatcher):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    try:
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API...")
        await bot.session.close()


# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    gsheets = init_gsheets()
    storage = init_storage()
    bot = init_bot(gsheets)  # –ü–µ—Ä–µ–¥–∞–µ–º gsheets –≤ –±–æ—Ç–∞
    dp = Dispatcher(storage=storage)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(buttons_router)
    dp.include_router(requests_router)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    register_chat_member_handlers(dp, bot, gsheets)
    register_command_handlers(dp)

    # === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ===
    async def main():
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        backup_handler = GoogleTableBackup(bot=bot)
        backup_task = asyncio.create_task(backup_handler.run_backup_loop())

        try:
            logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            await run_bot(bot, dp)
        finally:
            backup_task.cancel()
            await backup_task  # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            await bot.session.close()

    asyncio.run(main())
