"""
–ú–æ–¥—É–ª—å backup.py

–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –±–æ—Ç–∞.
–ö–∞–∂–¥—ã–π —á–∞—Å —Å–∫–∞—á–∏–≤–∞–µ—Ç Google –¢–∞–±–ª–∏—Ü—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –≤ Telegram –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç.
–§–∞–π–ª—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –¥–∏—Å–∫ ‚Äî —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏.
"""

import asyncio
from datetime import datetime
from io import BytesIO
from typing import Optional

import pandas as pd
from aiogram import Bot
from aiogram.types import BufferedInputFile

from configs.config import Config
from utils.GoogleSheets import GoogleSheetsManager
from utils.logger import get_logger

# === –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logger = get_logger(__name__)


class GoogleTableBackup:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.backup_interval_seconds = 60 * 60 * 8  # –∫–∞–∂–¥—ã–µ 8 —á–∞—Å–æ–≤ 
        self.gsheets = GoogleSheetsManager()
        self.gc = self.gsheets.client  # –£–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω —á–µ—Ä–µ–∑ GoogleSheetsManager

    async def _download_sheet_to_buffer(self) -> Optional[BytesIO]:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –ª–∏—Å—Ç—ã Google –¢–∞–±–ª–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±—É—Ñ–µ—Ä (–≤ –ø–∞–º—è—Ç—å)
        """
        try:
            output = BytesIO()

            spreadsheet = self.gc.open_by_key(Config.SPREADSHEET_ID)

            with pd.ExcelWriter(output, engine="openpyxl") as writer:
                for sheet in spreadsheet.worksheets():
                    data = sheet.get_all_records()
                    df = pd.DataFrame(data)
                    df.to_excel(
                        writer, index=False, sheet_name=sheet.title[:31]
                    )  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏–º–µ–Ω–∏ –ª–∏—Å—Ç–∞

            output.seek(0)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±—É—Ñ–µ—Ä")
            return output

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç–∞–±–ª–∏—Ü—ã: {e}", exc_info=True)
            return None

    async def _send_backup_to_admins(self, file_buffer: BytesIO, filename: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel-—Ñ–∞–π–ª –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç"""
        try:
            input_file = BufferedInputFile(file_buffer.getvalue(), filename=filename)

            for admin_id in Config.TELEGRAM_ADMIN_IDS:
                await self.bot.send_document(chat_id=admin_id, document=input_file)
                logger.info(f"üì© –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É {admin_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}", exc_info=True)

    async def run_backup_loop(self):
        """–¶–∏–∫–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è Google –¢–∞–±–ª–∏—Ü—ã")

        while True:
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"backup_{timestamp}.xlsx"

            try:
                file_buffer = await self._download_sheet_to_buffer()
                if file_buffer:
                    await self._send_backup_to_admins(file_buffer, filename)
                    logger.info("üßπ –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±—ç–∫–∞–ø–∞: {e}", exc_info=True)

            # –ñ–¥—ë–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—É—Å–∫–æ–º
            logger.info(
                f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {self.backup_interval_seconds // 60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—ç–∫–∞–ø–∞..."
            )
            await asyncio.sleep(self.backup_interval_seconds)
